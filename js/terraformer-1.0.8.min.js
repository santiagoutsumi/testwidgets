!function(t,e){"object"==typeof module&&"object"==typeof module.exports&&(exports=module.exports=e()),"object"==typeof window&&(t.Terraformer=e())}(this,function(){function t(t){return"[object Array]"===Object.prototype.toString.call(t)}function e(){var t=Array.prototype.slice.apply(arguments);void 0!==typeof console&&console.warn&&console.warn.apply(console,t)}function r(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t}function o(t){if(t.type)switch(t.type){case"Point":return[t.coordinates[0],t.coordinates[1],t.coordinates[0],t.coordinates[1]];case"MultiPoint":return s(t.coordinates);case"LineString":return s(t.coordinates);case"MultiLineString":return n(t.coordinates);case"Polygon":return n(t.coordinates);case"MultiPolygon":return i(t.coordinates);case"Feature":return t.geometry?o(t.geometry):null;case"FeatureCollection":return a(t);case"GeometryCollection":return u(t);default:throw new Error("Unknown type: "+t.type)}return null}function n(t){for(var e=null,r=null,o=null,n=null,i=0;i<t.length;i++)for(var s=t[i],a=0;a<s.length;a++){var u=s[a],c=u[0],l=u[1];null===e?e=c:e>c&&(e=c),null===r?r=c:c>r&&(r=c),null===o?o=l:o>l&&(o=l),null===n?n=l:l>n&&(n=l)}return[e,o,r,n]}function i(t){for(var e=null,r=null,o=null,n=null,i=0;i<t.length;i++)for(var s=t[i],a=0;a<s.length;a++)for(var u=s[a],c=0;c<u.length;c++){var l=u[c],h=l[0],p=l[1];null===e?e=h:e>h&&(e=h),null===r?r=h:h>r&&(r=h),null===o?o=p:o>p&&(o=p),null===n?n=p:p>n&&(n=p)}return[e,o,r,n]}function s(t){for(var e=null,r=null,o=null,n=null,i=0;i<t.length;i++){var s=t[i],a=s[0],u=s[1];null===e?e=a:e>a&&(e=a),null===r?r=a:a>r&&(r=a),null===o?o=u:o>u&&(o=u),null===n?n=u:u>n&&(n=u)}return[e,o,r,n]}function a(t){for(var e,r=[],n=t.features.length-1;n>=0;n--)e=o(t.features[n].geometry),r.push([e[0],e[1]]),r.push([e[2],e[3]]);return s(r)}function u(t){for(var e,r=[],n=t.geometries.length-1;n>=0;n--)e=o(t.geometries[n]),r.push([e[0],e[1]]),r.push([e[2],e[3]]);return s(r)}function c(t){var e=o(t);return{x:e[0],y:e[1],w:Math.abs(e[0]-e[2]),h:Math.abs(e[1]-e[3])}}function l(t){return t*W}function h(t){return t*X}function p(t,e){for(var r=0;r<t.length;r++)"number"==typeof t[r][0]&&(t[r]=e(t[r])),"object"==typeof t[r]&&(t[r]=p(t[r],e));return t}function f(t){var e=t[0],r=t[1];return[l(e/Q)-360*Math.floor((l(e/Q)+180)/360),l(Math.PI/2-2*Math.atan(Math.exp(-1*r/Q)))]}function y(t){var e=t[0],r=Math.max(Math.min(t[1],89.99999),-89.99999);return[h(e)*Q,Q/2*Math.log((1+Math.sin(h(r)))/(1-Math.sin(h(r))))]}function d(t,e,r){if("Point"===t.type)t.coordinates=e(t.coordinates);else if("Feature"===t.type)t.geometry=d(t.geometry,e,!0);else if("FeatureCollection"===t.type)for(var o=0;o<t.features.length;o++)t.features[o]=d(t.features[o],e,!0);else if("GeometryCollection"===t.type)for(var n=0;n<t.geometries.length;n++)t.geometries[n]=d(t.geometries[n],e,!0);else t.coordinates=p(t.coordinates,e);return r||e===y&&(t.crs=Y),e===f&&delete t.crs,t}function g(t){return d(t,y)}function v(t){return d(t,f)}function w(t,e){return e>t?-1:t>e?1:0}function m(t,e){return t[0]>e[0]?-1:t[0]<e[0]?1:t[1]>e[1]?-1:t[1]<e[1]?1:0}function P(t,e,r){return w((e[0]-t[0])*(r[1]-t[1])-(r[0]-t[0])*(e[1]-t[1]),0)}function M(t,e){var r=e[0]-t[0],o=e[1]-t[1];return r*r+o*o}function T(t,e){var r=e;for(var o in t){var n=P(e,r,t[o]);(-1===n||0===n&&M(e,t[o])>M(e,r))&&(r=t[o])}return r}function S(t){if(0===t.length)return[];if(1===t.length)return t;for(var e=[t.sort(m)[0]],r=0;r<e.length;r++){var o=T(t,e[r]);o!==e[0]&&e.push(o)}return e}function C(t){for(var e,r=0;r<t.length-3;r++){var o=t[r],n=t[r+1],i=t[r+2],s=[n[0]-o[0],n[1]-o[1]],a=i[0]*s[1]-i[1]*s[0]+s[0]*o[1]-s[1]*o[0];if(0===r)e=0>a?!0:!1;else if(e&&a>0||!e&&0>a)return!1}return!0}function x(t,e){for(var r=!1,o=-1,n=t.length,i=n-1;++o<n;i=o)(t[o][1]<=e[1]&&e[1]<t[i][1]||t[i][1]<=e[1]&&e[1]<t[o][1])&&e[0]<(t[i][0]-t[o][0])*(e[1]-t[o][1])/(t[i][1]-t[o][1])+t[o][0]&&(r=!r);return r}function F(t,e){if(t&&t.length){if(1===t.length)return x(t[0],e);if(x(t[0],e)){for(var r=1;r<t.length;r++)if(x(t[r],e))return!1;return!0}return!1}return!1}function L(t,e,r,o){var n=(o[0]-r[0])*(t[1]-r[1])-(o[1]-r[1])*(t[0]-r[0]),i=(e[0]-t[0])*(t[1]-r[1])-(e[1]-t[1])*(t[0]-r[0]),s=(o[1]-r[1])*(e[0]-t[0])-(o[0]-r[0])*(e[1]-t[1]);if(0!==s){var a=n/s,u=i/s;if(a>=0&&1>=a&&u>=0&&1>=u)return!0}return!1}function b(t){return!isNaN(parseFloat(t))&&isFinite(t)}function G(t,e){if(b(t[0][0])){if(b(e[0][0])){for(var r=0;r<t.length-1;r++)for(var o=0;o<e.length-1;o++)if(L(t[r],t[r+1],e[o],e[o+1]))return!0}else for(var n=0;n<e.length;n++)if(G(t,e[n]))return!0}else for(var i=0;i<t.length;i++)if(G(t[i],e))return!0;return!1}function E(t){for(var e=[],r=0;r<t.length;r++){var o=t[r].slice();k(o[0],o[o.length-1])===!1&&o.push(o[0]),e.push(o)}return e}function k(t,e){for(var r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0}function O(t,e){if(t.length!==e.length)return!1;for(var r=t.slice().sort(m),o=e.slice().sort(m),n=0;n<r.length;n++){if(r[n].length!==o[n].length)return!1;for(var i=0;i<r.length;i++)if(r[n][i]!==o[n][i])return!1}return!0}function V(t){if(t)switch(t.type){case"Point":return new H(t);case"MultiPoint":return new N(t);case"LineString":return new A(t);case"MultiLineString":return new I(t);case"Polygon":return new J(t);case"MultiPolygon":return new R(t);case"Feature":return new U(t);case"FeatureCollection":return new q(t);case"GeometryCollection":return new B(t);default:throw new Error("Unknown type: "+t.type)}}function H(e){var o=Array.prototype.slice.call(arguments);if(e&&"Point"===e.type&&e.coordinates)r(this,e);else if(e&&t(e))this.coordinates=e;else{if(!(o.length>=2))throw"Terraformer: invalid input for Terraformer.Point";this.coordinates=o}this.type="Point"}function N(e){if(e&&"MultiPoint"===e.type&&e.coordinates)r(this,e);else{if(!t(e))throw"Terraformer: invalid input for Terraformer.MultiPoint";this.coordinates=e}this.type="MultiPoint"}function A(e){if(e&&"LineString"===e.type&&e.coordinates)r(this,e);else{if(!t(e))throw"Terraformer: invalid input for Terraformer.LineString";this.coordinates=e}this.type="LineString"}function I(e){if(e&&"MultiLineString"===e.type&&e.coordinates)r(this,e);else{if(!t(e))throw"Terraformer: invalid input for Terraformer.MultiLineString";this.coordinates=e}this.type="MultiLineString"}function J(e){if(e&&"Polygon"===e.type&&e.coordinates)r(this,e);else{if(!t(e))throw"Terraformer: invalid input for Terraformer.Polygon";this.coordinates=e}this.type="Polygon"}function R(e){if(e&&"MultiPolygon"===e.type&&e.coordinates)r(this,e);else{if(!t(e))throw"Terraformer: invalid input for Terraformer.MultiPolygon";this.coordinates=e}this.type="MultiPolygon"}function U(t){if(t&&"Feature"===t.type)r(this,t);else{if(!(t&&t.type&&t.coordinates))throw"Terraformer: invalid input for Terraformer.Feature";this.geometry=t}this.type="Feature"}function q(e){if(e&&"FeatureCollection"===e.type&&e.features)r(this,e);else{if(!t(e))throw"Terraformer: invalid input for Terraformer.FeatureCollection";this.features=e}this.type="FeatureCollection"}function B(e){if(e&&"GeometryCollection"===e.type&&e.geometries)r(this,e);else if(t(e))this.geometries=e;else{if(!e.coordinates||!e.type)throw"Terraformer: invalid input for Terraformer.GeometryCollection";this.type="GeometryCollection",this.geometries=[e]}this.type="GeometryCollection"}function z(t,e,r){for(var o=y(t),n=r||64,i={type:"Polygon",coordinates:[[]]},s=1;n>=s;s++){var a=s*(360/n)*Math.PI/180;i.coordinates[0].push([o[0]+e*Math.cos(a),o[1]+e*Math.sin(a)])}return i.coordinates=E(i.coordinates),v(i)}function D(t,e,o){var n=o||64,i=e||250;if(!t||t.length<2||!i||!n)throw new Error("Terraformer: missing parameter for Terraformer.Circle");r(this,new U({type:"Feature",geometry:z(t,i,n),properties:{radius:i,center:t,steps:n}}))}var K={},Q=6378137,W=57.29577951308232,X=.017453292519943,Y={type:"link",properties:{href:"http://spatialreference.org/ref/sr-org/6928/ogcwkt/",type:"ogcwkt"}},Z={type:"link",properties:{href:"http://spatialreference.org/ref/epsg/4326/ogcwkt/",type:"ogcwkt"}},$=["length"];return V.prototype.toMercator=function(){return g(this)},V.prototype.toGeographic=function(){return v(this)},V.prototype.envelope=function(){return c(this)},V.prototype.bbox=function(){return o(this)},V.prototype.convexHull=function(){var t,e,r=[];if("Point"===this.type)return null;if("LineString"===this.type||"MultiPoint"===this.type){if(!(this.coordinates&&this.coordinates.length>=3))return null;r=this.coordinates}else if("Polygon"===this.type||"MultiLineString"===this.type){if(!(this.coordinates&&this.coordinates.length>0))return null;for(t=0;t<this.coordinates.length;t++)r=r.concat(this.coordinates[t]);if(r.length<3)return null}else if("MultiPolygon"===this.type){if(!(this.coordinates&&this.coordinates.length>0))return null;for(t=0;t<this.coordinates.length;t++)for(e=0;e<this.coordinates[t].length;e++)r=r.concat(this.coordinates[t][e]);if(r.length<3)return null}else if("Feature"===this.type){var o=new V(this.geometry);return o.convexHull()}return new J({type:"Polygon",coordinates:E([S(r)])})},V.prototype.toJSON=function(){var t={};for(var e in this)this.hasOwnProperty(e)&&-1===$.indexOf(e)&&(t[e]=this[e]);return t.bbox=o(this),t},V.prototype.contains=function(t){return new V(t).within(this)},V.prototype.within=function(t){var e,r,o;if("Feature"===t.type&&(t=t.geometry),"Point"===t.type&&"Point"===this.type)return k(this.coordinates,t.coordinates);if("MultiLineString"===t.type&&"Point"===this.type)for(r=0;r<t.coordinates.length;r++){var n={type:"LineString",coordinates:t.coordinates[r]};if(this.within(n))return!0}if(("LineString"===t.type||"MultiPoint"===t.type)&&"Point"===this.type)for(r=0;r<t.coordinates.length;r++){if(this.coordinates.length!==t.coordinates[r].length)return!1;if(k(this.coordinates,t.coordinates[r]))return!0}if("Polygon"===t.type){if("Polygon"===this.type){if(t.coordinates.length===this.coordinates.length)for(r=0;r<this.coordinates.length;r++)if(O(this.coordinates[r],t.coordinates[r]))return!0;return this.coordinates.length&&F(t.coordinates,this.coordinates[0][0])?!G(E(this.coordinates),E(t.coordinates)):!1}if("Point"===this.type)return F(t.coordinates,this.coordinates);if("LineString"===this.type||"MultiPoint"===this.type){if(!this.coordinates||0===this.coordinates.length)return!1;for(r=0;r<this.coordinates.length;r++)if(F(t.coordinates,this.coordinates[r])===!1)return!1;return!0}if("MultiLineString"===this.type){for(r=0;r<this.coordinates.length;r++){var i=new A(this.coordinates[r]);if(i.within(t)===!1)return o++,!1}return!0}if("MultiPolygon"===this.type){for(r=0;r<this.coordinates.length;r++){var s=new V({type:"Polygon",coordinates:this.coordinates[r]});if(s.within(t)===!1)return!1}return!0}}if("MultiPolygon"===t.type){if("Point"===this.type){if(t.coordinates.length)for(r=0;r<t.coordinates.length;r++)if(e=t.coordinates[r],F(e,this.coordinates)&&G([this.coordinates],t.coordinates)===!1)return!0;return!1}if("Polygon"===this.type){for(r=0;r<this.coordinates.length;r++)if(t.coordinates[r].length===this.coordinates.length)for(j=0;j<this.coordinates.length;j++)if(O(this.coordinates[j],t.coordinates[r][j]))return!0;if(G(this.coordinates,t.coordinates)===!1&&t.coordinates.length){for(r=0;r<t.coordinates.length;r++)e=t.coordinates[r],o=F(e,this.coordinates[0][0])===!1?!1:!0;return o}}else if("LineString"===this.type||"MultiPoint"===this.type)for(r=0;r<t.coordinates.length;r++){var a={type:"Polygon",coordinates:t.coordinates[r]};return this.within(a)?!0:!1}else{if("MultiLineString"===this.type){for(r=0;r<this.coordinates.length;r++){var u=new A(this.coordinates[r]);if(u.within(t)===!1)return!1}return!0}if("MultiPolygon"===this.type){for(r=0;r<t.coordinates.length;r++){var c={type:"Polygon",coordinates:t.coordinates[r]};if(this.within(c)===!1)return!1}return!0}}}return!1},V.prototype.intersects=function(t){"Feature"===t.type&&(t=t.geometry);var r=new V(t);if(this.within(t)||r.within(this))return!0;if("Point"!==this.type&&"MultiPoint"!==this.type&&"Point"!==t.type&&"MultiPoint"!==t.type)return G(this.coordinates,t.coordinates);if("Feature"===this.type){var o=new V(this.geometry);return o.intersects(t)}return e("Type "+this.type+" to "+t.type+" intersection is not supported by intersects"),!1},H.prototype=new V,H.prototype.constructor=H,N.prototype=new V,N.prototype.constructor=N,N.prototype.forEach=function(t){for(var e=0;e<this.coordinates.length;e++)t.apply(this,[this.coordinates[e],e,this.coordinates]);return this},N.prototype.addPoint=function(t){return this.coordinates.push(t),this},N.prototype.insertPoint=function(t,e){return this.coordinates.splice(e,0,t),this},N.prototype.removePoint=function(t){return"number"==typeof t?this.coordinates.splice(t,1):this.coordinates.splice(this.coordinates.indexOf(t),1),this},N.prototype.get=function(t){return new H(this.coordinates[t])},A.prototype=new V,A.prototype.constructor=A,A.prototype.addVertex=function(t){return this.coordinates.push(t),this},A.prototype.insertVertex=function(t,e){return this.coordinates.splice(e,0,t),this},A.prototype.removeVertex=function(t){return this.coordinates.splice(t,1),this},I.prototype=new V,I.prototype.constructor=I,I.prototype.forEach=function(t){for(var e=0;e<this.coordinates.length;e++)t.apply(this,[this.coordinates[e],e,this.coordinates])},I.prototype.get=function(t){return new A(this.coordinates[t])},J.prototype=new V,J.prototype.constructor=J,J.prototype.addVertex=function(t){return this.insertVertex(t,this.coordinates[0].length-1),this},J.prototype.insertVertex=function(t,e){return this.coordinates[0].splice(e,0,t),this},J.prototype.removeVertex=function(t){return this.coordinates[0].splice(t,1),this},J.prototype.close=function(){this.coordinates=E(this.coordinates)},J.prototype.hasHoles=function(){return this.coordinates.length>1},J.prototype.holes=function(){if(holes=[],this.hasHoles())for(var t=1;t<this.coordinates.length;t++)holes.push(new J([this.coordinates[t]]));return holes},R.prototype=new V,R.prototype.constructor=R,R.prototype.forEach=function(t){for(var e=0;e<this.coordinates.length;e++)t.apply(this,[this.coordinates[e],e,this.coordinates])},R.prototype.get=function(t){return new J(this.coordinates[t])},R.prototype.close=function(){var t=[];return this.forEach(function(e){t.push(E(e))}),this.coordinates=t,this},U.prototype=new V,U.prototype.constructor=U,q.prototype=new V,q.prototype.constructor=q,q.prototype.forEach=function(t){for(var e=0;e<this.features.length;e++)t.apply(this,[this.features[e],e,this.features])},q.prototype.get=function(t){var e;return this.forEach(function(r){r.id===t&&(e=r)}),new U(e)},B.prototype=new V,B.prototype.constructor=B,B.prototype.forEach=function(t){for(var e=0;e<this.geometries.length;e++)t.apply(this,[this.geometries[e],e,this.geometries])},B.prototype.get=function(t){return new V(this.geometries[t])},D.prototype=new V,D.prototype.constructor=D,D.prototype.recalculate=function(){return this.geometry=z(this.properties.center,this.properties.radius,this.properties.steps),this},D.prototype.center=function(t){return t&&(this.properties.center=t,this.recalculate()),this.properties.center},D.prototype.radius=function(t){return t&&(this.properties.radius=t,this.recalculate()),this.properties.radius},D.prototype.steps=function(t){return t&&(this.properties.steps=t,this.recalculate()),this.properties.steps},D.prototype.toJSON=function(){var t=V.prototype.toJSON.call(this);return t},K.Primitive=V,K.Point=H,K.MultiPoint=N,K.LineString=A,K.MultiLineString=I,K.Polygon=J,K.MultiPolygon=R,K.Feature=U,K.FeatureCollection=q,K.GeometryCollection=B,K.Circle=D,K.toMercator=g,K.toGeographic=v,K.Tools={},K.Tools.positionToMercator=y,K.Tools.positionToGeographic=f,K.Tools.applyConverter=d,K.Tools.toMercator=g,K.Tools.toGeographic=v,K.Tools.createCircle=z,K.Tools.calculateBounds=o,K.Tools.calculateEnvelope=c,K.Tools.coordinatesContainPoint=x,K.Tools.polygonContainsPoint=F,K.Tools.arraysIntersectArrays=G,K.Tools.coordinatesContainPoint=x,K.Tools.coordinatesEqual=O,K.Tools.convexHull=S,K.Tools.isConvex=C,K.MercatorCRS=Y,K.GeographicCRS=Z,K});